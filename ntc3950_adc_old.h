

// 零度
#define ADC_IN_COLD 220
// 56度
#define ADC_IN_HOT  799
// [0, 60，0.5] 10.15kΩ
xdata const uint16_t ADC_IN_TEMP[] = {237,242,247,252,257,262,267,272,278,283,288,293,299,304,310,315,320,326,332,337,343,348,354,360,365,371,377,383,388,394,400,406,412,417,423,429,435,441,447,452,458,464,470,476,481,487,493,499,504,510,516,521,527,533,538,544,550,555,561,566,571,577,582,588,593,598,603,609,614,619,624,629,634,639,644,649,654,659,663,668,673,677,682,686,691,695,700,704,708,713,717,721,725,729,733,737,741,745,749,753,757,760,764,768,771,775,778,782,785,788,792,795,798,801,805,808,811,814,817,820,823};

// 零度
#define ADC_OUT_COLD 30
// 93度
#define ADC_OUT_HOT  560
// [24, 105, 0.5] 100.00kΩ
xdata const uint16_t ADC_OUT_TEMP[] = {89,91,93,95,97,99,101,103,105,107,109,111,113,115,118,120,122,125,127,129,132,134,136,139,141,144,147,149,152,154,157,160,163,165,168,171,174,177,180,182,185,188,191,195,198,201,204,207,210,213,217,220,223,226,230,233,237,240,243,247,250,254,257,261,264,268,272,275,279,283,286,290,294,297,301,305,309,313,316,320,324,328,332,336,340,343,347,351,355,359,363,367,371,375,379,383,387,391,395,399,403,407,411,415,419,423,427,431,435,439,443,447,451,455,459,463,467,471,475,479,483,487,491,495,499,502,506,510,514,518,522,526,530,533,537,541,545,549,552,556,560,564,567,571,575,578,582,585,589,593,596,600,607,610,614,617,621,624,627,631,634,637};

static uint8_t binarySearch(const uint16_t a[], uint16_t high, uint16_t key) {
	uint16_t low = 0;

	while (low <= high) {
		uint16_t mid = (low + high) >> 1;
		int16_t midVal = a[mid] - key;

		if (midVal < 0) {
			low = mid + 1;
		} else if (midVal > 0) {
			high = mid - 1;
		} else {
			return mid;
		}
	}

	return low;
}

int16_t AdcInToTemp(uint16_t adc) {
	if (adc < 237) return -1;
	if (adc > 823) return 601;
	return binarySearch(ADC_IN_TEMP, sizeof(ADC_IN_TEMP)-1, adc) * 5;
}

int16_t AdcOutToTemp(uint16_t adc) {
	if (adc < 89) return 239;
	if (adc > 637) return 1051;
	return 240 + binarySearch(ADC_OUT_TEMP, sizeof(ADC_OUT_TEMP)-1, adc) * 5;
}
